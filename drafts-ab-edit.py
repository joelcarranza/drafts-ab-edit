#!/usr/bin/python

import plistlib
import json
import os.path
import sys
import os
import argparse
from datetime import datetime

DROPBOX_HOME = os.environ.get('DROPBOX_HOME')
if not DROPBOX_HOME:
	DROPBOX_HOME = os.path.join(os.environ['HOME'],'Dropbox')

def create_dropbox_action(filename,template='[[draft]]',prefix=0):
	# TODO: append,prepend
	basedir,name = os.path.split(filename)
	basename,ext = os.path.splitext(name)
	folder = os.path.relpath(basedir,DROPBOX_HOME)
	return dict(actionName=basename[prefix:],
		fileTemplate=template,
		fileName=basename,
		fileNameType=2, # 0=timestamp,1=firstline,2=predefined
		fileExtension=ext[1:], # do not include leading period
		writeType=2, # 0=create,1=prepend,2=append
		folder="/"+folder+"/")

def add_dropbox_action(data,action,tabn):
	# TODO: delete existing action with that name?
	actions = data['dropboxActions']	
	actions.append(action)
	actionTabIndexes = data['actionTabIndexes']
	actionTabIndexes[action['actionName']] = (tabn-1)

def cmp_action(a,b):
	for p in ['fileName','folder','fileExtension','fileNameType']:
		if a[p] != b[p]:
			return False
	return True

def remove_dropbox_action(data,filename):
	action = create_dropbox_action(filename)
	deleteme = filter(lambda a:cmp_action(a,action),data['dropboxActions'])
	for action in deleteme:
		action_name = action['actionName']
		print "Deleting: %s" % action_name
		data['dropboxActions'].remove(action)
		data['actionTabIndexes'].pop(action_name,None)
		data['actionDisposition'].pop(action_name,None)
		for action_list in data['actionTabSortIndexes'].values():
			if action_name in action_list:
				action_list.remove(action_name)

def get_last_backup():
	settings = os.path.join(DROPBOX_HOME,"Apps/Drafts/Settings")
	plists = [fn for fn in os.listdir(settings) if os.path.splitext(fn)[1] == '.plist']
	plists.sort()
	return os.path.join(settings,plists[-1])


def read_plist(args):
	# read in the plist
	if not args.infile:
		args.infile = get_last_backup()
	print "Reading from %s" % args.infile
	return plistlib.readPlist(args.infile)

def write_plist(data,args):
	# done with everything write out the file
	if not args.out:
		args.out = args.infile
	print "Writing to %s" % args.out
	plistlib.writePlist(data,args.out)

def main_add(args):
	data = read_plist(args)
	if args.templatefile:
		f = open(args.templatefile)
		args.template = f.read()
		f.close()

	for fn in args.addfiles:
		action = create_dropbox_action(fn,args.template,args.prefix)
		add_dropbox_action(data,action,args.pane)
	write_plist(data,args)

def main_rm(args):
	data = read_plist(args)
	for fn in args.rmfiles:
		remove_dropbox_action(data,fn)
	write_plist(data,args)

def main_list(args):
	data = read_plist(args)
	print json.dumps(data['dropboxActions'],indent=2)

if __name__ == '__main__':
	parser = argparse.ArgumentParser(description="""
	Modify an Action Backup plist file generated by the Drafts iOS app. 

	Drafts Action Backups are generally stored in ~/Dropbox/Apps/Drafts/Settings/.
	Unless explicitly specified with the -i or -o options, the latest backup is 
	selected for modification
	""")
	subparsers = parser.add_subparsers(help='add or remove actions')

	parser_add = subparsers.add_parser('add', help='add a dropbox action to backup')
	parser_add.add_argument('addfiles',nargs='+')
	parser_add.add_argument('-t','--template',default='[[draft]]')
	parser_add.add_argument('-tf','--templatefile')
	parser_add.add_argument('-p','--pane',type=int,default=0)
	parser_add.add_argument('-o','--out')
	parser_add.add_argument('-i','--in',dest='infile')
	parser_add.add_argument('--prefix',type=int,default=0)

	parser_add.set_defaults(func=main_add)

	parser_rm = subparsers.add_parser('rm', help='remove a dropbox action from backup')
	parser_rm.add_argument('rmfiles',nargs='+')
	parser_rm.add_argument('-o','--out')
	parser_rm.add_argument('-i','--in',dest='infile')
	parser_rm.set_defaults(func=main_rm)

	parser_list = subparsers.add_parser('list', help='list dropbox actions in backup')
	parser_list.add_argument('-i','--in',dest='infile')
	parser_list.set_defaults(func=main_list)

	args = parser.parse_args()
	args.func(args)